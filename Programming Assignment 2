## The function makecache creats a special "matrix". 

makeCache <- function(x = matrix()) {
        i <- NULL
        set <- function(y) {
                x <<- y
                i <<- NULL
        }
        get <- function() x
        setinverse <- function(inverse) i <<- inverse
        getinverse <- function() i
        list(set = set,
             get = get,
             setinverse = setinverse,
             getinverse = getinverse)
}

#The function "cacheSolve" computes the inverse of the special “matrix” returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
        i <- x$getinverse()
        if (!is.null(i)) {
                message("getting cached data")
                return(i)
        }
        data <- x$get()
        i <- solve(data, ...)
        x$setinverse(i)
        i
}

#testing
a<-matrix(c(1,2,3,4),3,3)
b<-makeCache(a)
cacheSolve(b)

#
#[,1]        [,2]        [,3]
#[1,] -0.19444444  0.05555556  0.36111111
#[2,]  0.27777778 -0.22222222  0.05555556
#[3,]  0.02777778  0.27777778 -0.19444444
